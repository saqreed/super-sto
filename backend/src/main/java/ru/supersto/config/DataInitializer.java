package ru.supersto.config;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;
import ru.supersto.entity.*;
import ru.supersto.repository.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

@Component
@RequiredArgsConstructor
@Slf4j
public class DataInitializer implements CommandLineRunner {

        private final UserRepository userRepository;
        private final ServiceRepository serviceRepository;
        private final ServiceStationRepository serviceStationRepository;
        private final ProductRepository productRepository;
        private final AppointmentRepository appointmentRepository;
        private final OrderRepository orderRepository;
        private final ReviewRepository reviewRepository;
        private final ChatMessageRepository chatMessageRepository;
        private final NotificationRepository notificationRepository;
        private final PasswordEncoder passwordEncoder;

        private final Random random = new Random();

        @Override
        public void run(String... args) throws Exception {
                // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞–Ω—å—à–µ –∏ –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB
                log.info("üöÄ DataInitializer CommandLineRunner –∑–∞–ø—É—â–µ–Ω, –∂–¥–µ–º ApplicationReadyEvent...");
        }

        @EventListener(ApplicationReadyEvent.class)
        public void initializeData() {
                log.info("üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");

                try {
                        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å—Ç–∞—Ä—Ç–µ
                        clearAllData();
                        createUsers();
                        createServiceStations();
                        createServices();
                        createProducts();
                        createAppointments();
                        createOrders();
                        createReviews();
                        createChatMessages();
                        createNotifications();

                        log.info("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
                        printStatistics();
                } catch (Exception e) {
                        log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {}", e.getMessage(), e);
                }
        }

        private void clearAllData() {
                log.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...");
                notificationRepository.deleteAll();
                chatMessageRepository.deleteAll();
                reviewRepository.deleteAll();
                orderRepository.deleteAll();
                appointmentRepository.deleteAll();
                productRepository.deleteAll();
                serviceRepository.deleteAll();
                serviceStationRepository.deleteAll();
                userRepository.deleteAll();
                log.info("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã");
        }

        private void createUsers() {
                log.info("üë• –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...");

                List<User> users = new ArrayList<>();

                // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
                users.add(createUser("admin@supersto.ru", "admin123", "–ê–¥–º–∏–Ω", "–ì–ª–∞–≤–Ω—ã–π",
                                "+7 (999) 000-01-01", UserRole.ADMIN, LoyaltyLevel.PLATINUM, 5000));
                users.add(createUser("admin2@supersto.ru", "admin123", "–ê–Ω–Ω–∞", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                                "+7 (999) 000-01-02", UserRole.ADMIN, LoyaltyLevel.PLATINUM, 3500));

                // –ú–∞—Å—Ç–µ—Ä–∞
                String[][] masterData = {
                                { "master1@supersto.ru", "–ò–≤–∞–Ω", "–ú–∞—Å—Ç–µ—Ä–æ–≤" },
                                { "master2@supersto.ru", "–°–µ—Ä–≥–µ–π", "–ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–æ–≤" },
                                { "master3@supersto.ru", "–î–º–∏—Ç—Ä–∏–π", "–†–µ–º–æ–Ω—Ç–Ω–∏–∫–æ–≤" },
                                { "master4@supersto.ru", "–ê–ª–µ–∫—Å–µ–π", "–î–∏–∞–≥–Ω–æ—Å—Ç–æ–≤" },
                                { "master5@supersto.ru", "–ú–∏—Ö–∞–∏–ª", "–î–≤–∏–≥–∞—Ç–µ–ª–µ–≤" },
                                { "master6@supersto.ru", "–í–ª–∞–¥–∏–º–∏—Ä", "–≠–ª–µ–∫—Ç—Ä–∏–∫–æ–≤" },
                                { "master7@supersto.ru", "–ê–Ω–¥—Ä–µ–π", "–ö—É–∑–æ–≤—â–∏–∫–æ–≤" },
                                { "master8@supersto.ru", "–ü–∞–≤–µ–ª", "–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂–µ—Ä" }
                };

                for (int i = 0; i < masterData.length; i++) {
                        users.add(createUser(masterData[i][0], "master123", masterData[i][1], masterData[i][2],
                                        String.format("+7 (999) 000-02-%02d", i + 10), UserRole.MASTER,
                                        i < 3 ? LoyaltyLevel.GOLD : LoyaltyLevel.SILVER, 500 + random.nextInt(2000)));
                }

                // –ö–ª–∏–µ–Ω—Ç—ã
                String[][] clientData = {
                                { "client1@supersto.ru", "–ü–µ—Ç—Ä", "–ò–≤–∞–Ω–æ–≤" },
                                { "client2@supersto.ru", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "–ü–µ—Ç—Ä–æ–≤" },
                                { "client3@supersto.ru", "–ù–∏–∫–æ–ª–∞–π", "–°–∏–¥–æ—Ä–æ–≤" },
                                { "client4@supersto.ru", "–í–∞—Å–∏–ª–∏–π", "–ö—É–∑–Ω–µ—Ü–æ–≤" },
                                { "client5@supersto.ru", "–ê–Ω–¥—Ä–µ–π", "–°–º–∏—Ä–Ω–æ–≤" },
                                { "client6@supersto.ru", "–°–µ—Ä–≥–µ–π", "–ü–æ–ø–æ–≤" },
                                { "client7@supersto.ru", "–î–º–∏—Ç—Ä–∏–π", "–õ–µ–±–µ–¥–µ–≤" },
                                { "client8@supersto.ru", "–ê–ª–µ–∫—Å–µ–π", "–ö–æ–∑–ª–æ–≤" },
                                { "client9@supersto.ru", "–ò–≥–æ—Ä—å", "–ù–æ–≤–∏–∫–æ–≤" },
                                { "client10@supersto.ru", "–í–ª–∞–¥–∏–º–∏—Ä", "–ú–æ—Ä–æ–∑–æ–≤" },
                                { "client11@supersto.ru", "–ï–≤–≥–µ–Ω–∏–π", "–í–æ–ª–∫–æ–≤" },
                                { "client12@supersto.ru", "–û–ª–µ–≥", "–°–æ–ª–æ–≤—å–µ–≤" },
                                { "client13@supersto.ru", "–ú–∞–∫—Å–∏–º", "–í–∞—Å–∏–ª—å–µ–≤" },
                                { "client14@supersto.ru", "–†–æ–º–∞–Ω", "–ó–∞—Ö–∞—Ä–æ–≤" },
                                { "client15@supersto.ru", "–î–µ–Ω–∏—Å", "–ë–æ—Ä–∏—Å–æ–≤" },
                                { "client16@supersto.ru", "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω", "–§–µ–¥–æ—Ä–æ–≤" },
                                { "client17@supersto.ru", "–°—Ç–∞–Ω–∏—Å–ª–∞–≤", "–ú–∏—Ö–∞–π–ª–æ–≤" },
                                { "client18@supersto.ru", "–ê—Ä—Ç–µ–º", "–¢–∞—Ä–∞—Å–æ–≤" },
                                { "client19@supersto.ru", "–í–∏–∫—Ç–æ—Ä", "–ë–µ–ª–æ–≤" },
                                { "client20@supersto.ru", "–ê–Ω–∞—Ç–æ–ª–∏–π", "–ö–æ–º–∞—Ä–æ–≤" },
                                { "client21@supersto.ru", "–ò–ª—å—è", "–û—Ä–ª–æ–≤" },
                                { "client22@supersto.ru", "–Æ—Ä–∏–π", "–ö–∏—Å–µ–ª–µ–≤" },
                                { "client23@supersto.ru", "–ì—Ä–∏–≥–æ—Ä–∏–π", "–ú–∞–∫–∞—Ä–æ–≤" },
                                { "client24@supersto.ru", "–ú–∏—Ö–∞–∏–ª", "–ê–Ω–¥—Ä–µ–µ–≤" },
                                { "Redaer05@yandex.ru", "Redaer05", "–ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π" }
                };

                LoyaltyLevel[] loyaltyLevels = { LoyaltyLevel.BRONZE, LoyaltyLevel.SILVER, LoyaltyLevel.GOLD };

                for (int i = 0; i < clientData.length; i++) {
                        users.add(createUser(clientData[i][0], "client123", clientData[i][1], clientData[i][2],
                                        String.format("+7 (999) 000-03-%02d", i + 10), UserRole.CLIENT,
                                        loyaltyLevels[i % 3], random.nextInt(1000)));
                }

                userRepository.saveAll(users);
                log.info("‚úÖ –°–æ–∑–¥–∞–Ω–æ {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", userRepository.count());
        }

        private User createUser(String email, String password, String firstName, String lastName,
                        String phone, UserRole role, LoyaltyLevel loyaltyLevel, int loyaltyPoints) {
                User user = new User();
                user.setEmail(email);
                user.setPassword(passwordEncoder.encode(password));
                user.setFirstName(firstName);
                user.setLastName(lastName);
                user.setPhone(phone);
                user.setRole(role);
                user.setLoyaltyLevel(loyaltyLevel);
                user.setLoyaltyPoints(loyaltyPoints);
                user.setCreatedAt(randomPastDate(400));
                return user;
        }

        private void createServiceStations() {
                log.info("üè¢ –°–æ–∑–¥–∞–Ω–∏–µ –°–¢–û...");

                List<ServiceStation> stations = Arrays.asList(
                                createServiceStation("–°—É–ø–µ—Ä–°–¢–û –¶–µ–Ω—Ç—Ä", "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è, –¥. 1",
                                                "+7 (495) 000-01-01", "center@supersto.ru",
                                                "–û—Å–Ω–æ–≤–Ω–æ–π —Ü–µ–Ω—Ç—Ä –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –ø–æ–ª–Ω—ã–º —Å–ø–µ–∫—Ç—Ä–æ–º —É—Å–ª—É–≥",
                                                "08:00", "20:00"),
                                createServiceStation("–°—É–ø–µ—Ä–°–¢–û –°–µ–≤–µ—Ä", "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –°–µ–≤–µ—Ä–Ω–∞—è, –¥. 15",
                                                "+7 (495) 000-02-02", "north@supersto.ru",
                                                "–°–µ–≤–µ—Ä–Ω—ã–π —Ñ–∏–ª–∏–∞–ª —Å–µ—Ç–∏ –°—É–ø–µ—Ä–°–¢–û, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –∫—É–∑–æ–≤–Ω–æ–π —Ä–µ–º–æ–Ω—Ç",
                                                "09:00", "21:00"),
                                createServiceStation("–°—É–ø–µ—Ä–°–¢–û –í–æ—Å—Ç–æ–∫", "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –í–æ—Å—Ç–æ—á–Ω–∞—è, –¥. 25",
                                                "+7 (495) 000-03-03", "east@supersto.ru",
                                                "–í–æ—Å—Ç–æ—á–Ω—ã–π —Ñ–∏–ª–∏–∞–ª, —ç–∫—Å–ø—Ä–µ—Å—Å-—Å–µ—Ä–≤–∏—Å –∏ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂", "07:00", "22:00"));

                serviceStationRepository.saveAll(stations);
                log.info("‚úÖ –°–æ–∑–¥–∞–Ω–æ {} –°–¢–û", serviceStationRepository.count());
        }

        private ServiceStation createServiceStation(String name, String address, String phone,
                        String email, String description, String startTime, String endTime) {
                ServiceStation station = new ServiceStation();
                station.setName(name);
                station.setAddress(address);
                station.setPhone(phone);
                station.setEmail(email);
                station.setDescription(description);

                WorkingHours hours = new WorkingHours();
                hours.setStart(startTime);
                hours.setEnd(endTime);
                station.setWorkingHours(hours);

                station.setCreatedAt(randomPastDate(365));
                station.setUpdatedAt(LocalDateTime.now());
                return station;
        }

        private void createServices() {
                log.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥...");

                List<Service> services = Arrays.asList(
                                // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                                createService("–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è",
                                                "–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è —Å —Ä–∞—Å–ø–µ—á–∞—Ç–∫–æ–π –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫",
                                                45, new BigDecimal("1500.0")),
                                createService("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ö–æ–¥–æ–≤–æ–π —á–∞—Å—Ç–∏",
                                                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–≤–µ—Å–∫–∏, –∞–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä–æ–≤, —Ä—É–ª–µ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                                                60, new BigDecimal("1200.0")),
                                createService("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ—Ä–º–æ–∑–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã",
                                                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–º–æ–∑–Ω—ã—Ö –¥–∏—Å–∫–æ–≤, –∫–æ–ª–æ–¥–æ–∫, –∂–∏–¥–∫–æ—Å—Ç–∏ –∏ –º–∞–≥–∏—Å—Ç—Ä–∞–ª–µ–π",
                                                30, new BigDecimal("800.0")),

                                // –†–µ–º–æ–Ω—Ç –¥–≤–∏–≥–∞—Ç–µ–ª—è
                                createService("–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤",
                                                "–ó–∞–º–µ–Ω–∞ –º–æ—Ç–æ—Ä–Ω–æ–≥–æ –º–∞—Å–ª–∞, –º–∞—Å–ª—è–Ω–æ–≥–æ –∏ –≤–æ–∑–¥—É—à–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤",
                                                60, new BigDecimal("2500.0")),
                                createService("–ó–∞–º–µ–Ω–∞ —Ä–µ–º–Ω—è –ì–†–ú",
                                                "–ó–∞–º–µ–Ω–∞ —Ä–µ–º–Ω—è –≥–∞–∑–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∑–º–∞ —Å —Ä–æ–ª–∏–∫–∞–º–∏",
                                                240, new BigDecimal("8500.0")),
                                createService("–†–µ–º–æ–Ω—Ç —Å–∏—Å—Ç–µ–º—ã –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è",
                                                "–ó–∞–º–µ–Ω–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞, —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç–∞, –ø–∞—Ç—Ä—É–±–∫–æ–≤ —Å–∏—Å—Ç–µ–º—ã –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è",
                                                180, new BigDecimal("6500.0")),
                                createService("–ö–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –¥–≤–∏–≥–∞—Ç–µ–ª—è",
                                                "–ü–æ–ª–Ω–∞—è —Ä–∞–∑–±–æ—Ä–∫–∞ –∏ —Å–±–æ—Ä–∫–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è —Å –∑–∞–º–µ–Ω–æ–π –ø–æ—Ä—à–Ω–µ–≤–æ–π –≥—Ä—É–ø–ø—ã",
                                                1440, new BigDecimal("85000.0")),

                                // –≠–ª–µ–∫—Ç—Ä–∏–∫–∞
                                createService("–ó–∞–º–µ–Ω–∞ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞",
                                                "–ó–∞–º–µ–Ω–∞ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–æ–π –±–∞—Ç–∞—Ä–µ–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞",
                                                30, new BigDecimal("3500.0")),
                                createService("–†–µ–º–æ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞",
                                                "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —Ä–µ–º–æ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–∞",
                                                120, new BigDecimal("4500.0")),
                                createService("–ó–∞–º–µ–Ω–∞ —Å—Ç–∞—Ä—Ç–µ—Ä–∞",
                                                "–°–Ω—è—Ç–∏–µ, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—Ç–µ—Ä–∞",
                                                90, new BigDecimal("5500.0")),

                                // –ö—É–∑–æ–≤–Ω–æ–π —Ä–µ–º–æ–Ω—Ç
                                createService("–ü–æ–∫—Ä–∞—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫—É–∑–æ–≤–∞",
                                                "–ü–æ–∫—Ä–∞—Å–∫–∞ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫—É–∑–æ–≤–∞ (–¥–≤–µ—Ä—å, –∫—Ä—ã–ª–æ, –±–∞–º–ø–µ—Ä)",
                                                480, new BigDecimal("12000.0")),
                                createService("–†–∏—Ö—Ç–æ–≤–∫–∞ –ø–æ—Å–ª–µ –î–¢–ü",
                                                "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –∫—É–∑–æ–≤–∞ –ø–æ—Å–ª–µ –∞–≤–∞—Ä–∏–∏",
                                                720, new BigDecimal("25000.0")),
                                createService("–ü–æ–ª–∏—Ä–æ–≤–∫–∞ –∫—É–∑–æ–≤–∞",
                                                "–ê–±—Ä–∞–∑–∏–≤–Ω–∞—è –ø–æ–ª–∏—Ä–æ–≤–∫–∞ —Å –∑–∞—â–∏—Ç–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º",
                                                240, new BigDecimal("8500.0")),

                                // –®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂
                                createService("–ó–∞–º–µ–Ω–∞ –∫–æ–ª–µ—Å",
                                                "–°–Ω—è—Ç–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ 4-—Ö –∫–æ–ª–µ—Å —Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–æ–π",
                                                45, new BigDecimal("1600.0")),
                                createService("–†–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª–æ–≤",
                                                "–†–µ–º–æ–Ω—Ç –ø—Ä–æ–∫–æ–ª–æ–≤ –≤ —à–∏–Ω–µ –º–µ—Ç–æ–¥–æ–º –∂–≥—É—Ç–æ–≤–∞–Ω–∏—è",
                                                20, new BigDecimal("800.0")),
                                createService("–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –∫–æ–ª–µ—Å",
                                                "–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ 4-—Ö –∫–æ–ª–µ—Å –Ω–∞ —Å—Ç–∞–Ω–∫–µ",
                                                30, new BigDecimal("1200.0")),

                                // –¢–û
                                createService("–¢–û-1 (15000 –∫–º)",
                                                "–ü–ª–∞–Ω–æ–≤–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ - –∑–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞, —Ñ–∏–ª—å—Ç—Ä–æ–≤, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º",
                                                120, new BigDecimal("5500.0")),
                                createService("–¢–û-2 (30000 –∫–º)",
                                                "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –¢–û —Å –∑–∞–º–µ–Ω–æ–π —Å–≤–µ—á–µ–π, –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–æ—Ä–º–æ–∑–æ–≤",
                                                180, new BigDecimal("8500.0")),
                                createService("–¢–û-3 (60000 –∫–º)",
                                                "–ü–æ–ª–Ω–æ–µ –¢–û —Å –∑–∞–º–µ–Ω–æ–π —Ä–µ–º–Ω–µ–π, –∂–∏–¥–∫–æ—Å—Ç–µ–π, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π",
                                                240, new BigDecimal("12500.0")));

                serviceRepository.saveAll(services);
                log.info("‚úÖ –°–æ–∑–¥–∞–Ω–æ {} —É—Å–ª—É–≥", serviceRepository.count());
        }

        private Service createService(String name, String description, int duration, BigDecimal price) {
                Service service = new Service();
                service.setName(name);
                service.setDescription(description);
                service.setDuration(duration);
                service.setPrice(price);
                service.setCreatedAt(randomPastDate(365));
                return service;
        }

        private void createProducts() {
                log.info("üõí –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤...");

                List<Product> products = Arrays.asList(
                                // –ú–∞—Å–ª–∞
                                createProduct("Castrol GTX 5W-30",
                                                "–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–æ—Ç–æ—Ä–Ω–æ–µ –º–∞—Å–ª–æ –¥–ª—è –±–µ–Ω–∑–∏–Ω–æ–≤—ã—Ö –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π",
                                                new BigDecimal("2800.0"), 25, ProductCategory.OILS_FLUIDS, "Castrol",
                                                "CAST-GTX-5W30-4L"),
                                createProduct("Mobil 1 0W-20", "–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ –º–æ—Ç–æ—Ä–Ω–æ–µ –º–∞—Å–ª–æ –ø—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å–∞",
                                                new BigDecimal("4500.0"), 18, ProductCategory.OILS_FLUIDS, "Mobil",
                                                "MOBIL-1-0W20-4L"),
                                createProduct("Shell Helix Ultra 5W-40", "–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ –º–æ—Ç–æ—Ä–Ω–æ–µ –º–∞—Å–ª–æ",
                                                new BigDecimal("3800.0"), 32, ProductCategory.OILS_FLUIDS, "Shell",
                                                "SHELL-HU-5W40-4L"),

                                // –§–∏–ª—å—Ç—Ä—ã
                                createProduct("–§–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π Mann W 712/75",
                                                "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è BMW, Mercedes",
                                                new BigDecimal("850.0"), 45, ProductCategory.FILTERS, "Mann",
                                                "MANN-W712-75"),
                                createProduct("–§–∏–ª—å—Ç—Ä –≤–æ–∑–¥—É—à–Ω—ã–π Bosch 1987429404",
                                                "–í–æ–∑–¥—É—à–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è Volkswagen, Audi",
                                                new BigDecimal("1200.0"), 28, ProductCategory.FILTERS, "Bosch",
                                                "BOSCH-1987429404"),
                                createProduct("–§–∏–ª—å—Ç—Ä —Ç–æ–ø–ª–∏–≤–Ω—ã–π Mahle KL 756",
                                                "–¢–æ–ø–ª–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –¥–∏–∑–µ–ª—å–Ω—ã—Ö –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π",
                                                new BigDecimal("1650.0"), 22, ProductCategory.FILTERS, "Mahle",
                                                "MAHLE-KL756"),

                                // –¢–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏
                                createProduct("–ö–æ–ª–æ–¥–∫–∏ —Ç–æ—Ä–º–æ–∑–Ω—ã–µ Brembo P 85 020",
                                                "–ü–µ—Ä–µ–¥–Ω–∏–µ —Ç–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏ –¥–ª—è BMW 3 —Å–µ—Ä–∏–∏",
                                                new BigDecimal("4500.0"), 15, ProductCategory.BRAKE_PARTS, "Brembo",
                                                "BREMBO-P85020"),
                                createProduct("–ö–æ–ª–æ–¥–∫–∏ —Ç–æ—Ä–º–æ–∑–Ω—ã–µ ATE 13.0460-7215.2",
                                                "–ó–∞–¥–Ω–∏–µ —Ç–æ—Ä–º–æ–∑–Ω—ã–µ –∫–æ–ª–æ–¥–∫–∏ –¥–ª—è Mercedes C-–∫–ª–∞—Å—Å",
                                                new BigDecimal("3200.0"), 19, ProductCategory.BRAKE_PARTS, "ATE",
                                                "ATE-13046072152"),

                                // –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã
                                createProduct("–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä Bosch S4 005 60Ah",
                                                "–°—Ç–∞—Ä—Ç–µ—Ä–Ω—ã–π –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä 60–ê/—á –¥–ª—è –ª–µ–≥–∫–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π",
                                                new BigDecimal("8500.0"), 12, ProductCategory.ELECTRICAL_PARTS, "Bosch",
                                                "BOSCH-S4005-60AH"),
                                createProduct("–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä Varta Blue Dynamic E11 74Ah",
                                                "–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –µ–º–∫–æ—Å—Ç–∏ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ",
                                                new BigDecimal("10200.0"), 8, ProductCategory.ELECTRICAL_PARTS, "Varta",
                                                "VARTA-E11-74AH"),

                                // –®–∏–Ω—ã
                                createProduct("Michelin Pilot Sport 4 225/45 R17",
                                                "–õ–µ—Ç–Ω–∏–µ —à–∏–Ω—ã –ø—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å–∞ –¥–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–∂–¥–µ–Ω–∏—è",
                                                new BigDecimal("12500.0"), 20, ProductCategory.TIRES_WHEELS, "Michelin",
                                                "MICH-PS4-225-45-R17"),
                                createProduct("Continental WinterContact TS 860 205/55 R16",
                                                "–ó–∏–º–Ω–∏–µ —à–∏–Ω—ã —Å –æ—Ç–ª–∏—á–Ω—ã–º —Å—Ü–µ–ø–ª–µ–Ω–∏–µ–º –Ω–∞ —Å–Ω–µ–≥—É –∏ –ª—å–¥—É",
                                                new BigDecimal("8900.0"), 24, ProductCategory.TIRES_WHEELS,
                                                "Continental", "CONT-WC860-205-55-R16"),

                                // –°–≤–µ—á–∏
                                createProduct("–°–≤–µ—á–∏ NGK Iridium IX BKR6EIX",
                                                "–ò—Ä–∏–¥–∏–µ–≤—ã–µ —Å–≤–µ—á–∏ –∑–∞–∂–∏–≥–∞–Ω–∏—è —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞",
                                                new BigDecimal("1800.0"), 40, ProductCategory.ELECTRICAL_PARTS, "NGK",
                                                "NGK-BKR6EIX"),
                                createProduct("–°–≤–µ—á–∏ Bosch Platinum Plus FR7DPP332",
                                                "–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–µ —Å–≤–µ—á–∏ –¥–ª—è –±–µ–Ω–∑–∏–Ω–æ–≤—ã—Ö –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π",
                                                new BigDecimal("1200.0"), 35, ProductCategory.ELECTRICAL_PARTS, "Bosch",
                                                "BOSCH-FR7DPP332"),

                                // –ü—Ä–æ—á–µ–µ
                                createProduct("–ù–µ–∑–∞–º–µ—Ä–∑–∞—é—â–∞—è –∂–∏–¥–∫–æ—Å—Ç—å -30¬∞C",
                                                "–°—Ç–µ–∫–ª–æ–æ–º—ã–≤–∞—é—â–∞—è –∂–∏–¥–∫–æ—Å—Ç—å –¥–ª—è –∑–∏–º–Ω–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞",
                                                new BigDecimal("350.0"), 150, ProductCategory.OILS_FLUIDS, "Arctic",
                                                "ARCTIC-WASH-30-4L"));

                productRepository.saveAll(products);
                log.info("‚úÖ –°–æ–∑–¥–∞–Ω–æ {} –ø—Ä–æ–¥—É–∫—Ç–æ–≤", productRepository.count());
        }

        private Product createProduct(String name, String description, BigDecimal price, int quantity,
                        ProductCategory category, String brand, String partNumber) {
                return Product.builder()
                                .name(name)
                                .description(description)
                                .price(price)
                                .quantity(quantity)
                                .category(category)
                                .brand(brand)
                                .partNumber(partNumber)
                                .isActive(true)
                                .createdAt(randomPastDate(200))
                                .build();
        }

        private void createAppointments() {
                log.info("üìÖ –°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —É—Å–ª—É–≥–∏...");

                List<User> clients = userRepository.findByRole(UserRole.CLIENT);
                List<User> masters = userRepository.findByRole(UserRole.MASTER);
                List<Service> services = serviceRepository.findAll();

                if (clients.isEmpty() || masters.isEmpty() || services.isEmpty()) {
                        log.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π");
                        return;
                }

                List<Appointment> appointments = new ArrayList<>();
                AppointmentStatus[] statuses = AppointmentStatus.values();

                // –°–æ–∑–¥–∞–µ–º 100 –∑–∞–ø–∏—Å–µ–π
                for (int i = 0; i < 100; i++) {
                        User client = clients.get(random.nextInt(clients.size()));
                        User master = masters.get(random.nextInt(masters.size()));
                        Service service = services.get(random.nextInt(services.size()));

                        LocalDateTime appointmentDate = i < 30 ? randomPastDate(30) : randomFutureDate(60);
                        AppointmentStatus status = i < 20 ? AppointmentStatus.COMPLETED
                                        : statuses[random.nextInt(statuses.length)];

                        appointments.add(createAppointment(client, master, service, appointmentDate, status));
                }

                appointmentRepository.saveAll(appointments);
                log.info("‚úÖ –°–æ–∑–¥–∞–Ω–æ {} –∑–∞–ø–∏—Å–µ–π", appointmentRepository.count());
        }

        private Appointment createAppointment(User client, User master, Service service,
                        LocalDateTime dateTime, AppointmentStatus status) {
                return Appointment.builder()
                                .client(client)
                                .master(master)
                                .service(service)
                                .appointmentDate(dateTime)
                                .status(status)
                                .description(random.nextInt(5) == 0 ? "–ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏–ª –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ"
                                                : "")
                                .totalPrice(service.getPrice())
                                .createdAt(randomPastDate(60))
                                .build();
        }

        private void createOrders() {
                log.info("üõçÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤...");

                List<User> clients = userRepository.findByRole(UserRole.CLIENT);
                List<Product> products = productRepository.findAll();

                if (clients.isEmpty() || products.isEmpty()) {
                        log.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤");
                        return;
                }

                List<Order> orders = new ArrayList<>();
                OrderStatus[] statuses = OrderStatus.values();

                // –°–æ–∑–¥–∞–µ–º 50 –∑–∞–∫–∞–∑–æ–≤
                for (int i = 0; i < 50; i++) {
                        User client = clients.get(random.nextInt(clients.size()));
                        int itemCount = random.nextInt(4) + 1; // 1-4 —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–∫–∞–∑–µ
                        List<Product> orderProducts = new ArrayList<>();

                        for (int j = 0; j < itemCount; j++) {
                                Product product = products.get(random.nextInt(products.size()));
                                if (!orderProducts.contains(product)) {
                                        orderProducts.add(product);
                                }
                        }

                        OrderStatus status = i < 15 ? OrderStatus.DELIVERED : statuses[random.nextInt(statuses.length)];
                        orders.add(createOrder(client, orderProducts, status));
                }

                orderRepository.saveAll(orders);
                log.info("‚úÖ –°–æ–∑–¥–∞–Ω–æ {} –∑–∞–∫–∞–∑–æ–≤", orderRepository.count());
        }

        private Order createOrder(User client, List<Product> productList, OrderStatus status) {
                List<OrderItem> items = productList.stream().map(product -> {
                        OrderItem item = OrderItem.builder()
                                        .product(product)
                                        .quantity(random.nextInt(3) + 1)
                                        .unitPrice(product.getPrice())
                                        .build();
                        item.calculateTotalPrice();
                        return item;
                }).toList();

                String[] streets = { "–õ–µ–Ω–∏–Ω–∞", "–ü—É—à–∫–∏–Ω–∞", "–¢–≤–µ—Ä—Å–∫–∞—è", "–ê—Ä–±–∞—Ç", "–°–∞–¥–æ–≤–∞—è" };
                String address = String.format("–≥. –ú–æ—Å–∫–≤–∞, —É–ª. %s, –¥. %d",
                                streets[random.nextInt(streets.length)], random.nextInt(100) + 1);

                Order order = Order.builder()
                                .client(client)
                                .items(items)
                                .status(status)
                                .shippingAddress(address)
                                .contactPhone(client.getPhone())
                                .notes("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑")
                                .createdAt(randomPastDate(90))
                                .build();

                order.calculateTotalAmount();
                return order;
        }

        private void createReviews() {
                log.info("‚≠ê –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤...");

                List<Appointment> completedAppointments = appointmentRepository
                                .findByStatus(AppointmentStatus.COMPLETED);

                if (completedAppointments.isEmpty()) {
                        log.warn("‚ö†Ô∏è –ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤");
                        return;
                }

                String[] reviewTexts = {
                                "–û—Ç–ª–∏—á–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ! –í—Å–µ —Å–¥–µ–ª–∞–ª–∏ –±—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ.",
                                "–ú–∞—Å—Ç–µ—Ä–∞ –∑–Ω–∞—é—Ç —Å–≤–æ–µ –¥–µ–ª–æ. –†–µ–∫–æ–º–µ–Ω–¥—É—é!",
                                "–¶–µ–Ω—ã –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–µ, —Ä–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ —Å–æ–≤–µ—Å—Ç—å.",
                                "–ù–µ–º–Ω–æ–≥–æ –∑–∞—Ç—è–Ω—É–ª–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ö–æ—Ä–æ—à–∏–π.",
                                "–í—Å–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –±—É–¥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –µ—â–µ.",
                                "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–∞–±–æ—Ç–µ.",
                                "–í–µ–∂–ª–∏–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª, —É–¥–æ–±–Ω–∞—è –∑–∞–ø–∏—Å—å –æ–Ω–ª–∞–π–Ω.",
                                "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏, –≥–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ —Ä–∞–±–æ—Ç—ã.",
                                "–ë—ã—Å—Ç—Ä–æ —É—Å—Ç—Ä–∞–Ω–∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É, –º–∞—à–∏–Ω–∞ –∫–∞–∫ –Ω–æ–≤–∞—è!",
                                "–•–æ—Ä–æ—à–µ–µ –°–¢–û, —Å–æ–≤–µ—Ç—É—é –¥—Ä—É–∑—å—è–º."
                };

                List<Review> reviews = new ArrayList<>();
                int reviewCount = Math.min(completedAppointments.size(), 40);

                for (int i = 0; i < reviewCount; i++) {
                        Appointment appointment = completedAppointments.get(i);
                        int rating = random.nextInt(2) + 4; // 4-5 –∑–≤–µ–∑–¥
                        String comment = reviewTexts[random.nextInt(reviewTexts.length)];

                        reviews.add(createReview(appointment.getClient(), appointment, rating, comment));
                }

                reviewRepository.saveAll(reviews);
                log.info("‚úÖ –°–æ–∑–¥–∞–Ω–æ {} –æ—Ç–∑—ã–≤–æ–≤", reviewRepository.count());
        }

        private Review createReview(User client, Appointment appointment, int rating, String comment) {
                return Review.builder()
                                .client(client)
                                .appointment(appointment)
                                .rating(rating)
                                .comment(comment)
                                .isVisible(true)
                                .createdAt(appointment.getAppointmentDate().plusDays(random.nextInt(7) + 1))
                                .build();
        }

        private void createChatMessages() {
                log.info("üí¨ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞...");

                List<User> clients = userRepository.findByRole(UserRole.CLIENT);
                List<User> masters = userRepository.findByRole(UserRole.MASTER);

                if (clients.isEmpty() || masters.isEmpty()) {
                        log.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π");
                        return;
                }

                String[] messageTexts = {
                                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00",
                                "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú–∞—Å—Ç–µ—Ä —É–∂–µ –≥–æ—Ç–æ–≤–∏—Ç —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ",
                                "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ú–æ–∂–µ—Ç–µ –ø–æ–¥—ä–µ—Ö–∞—Ç—å, –º—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω—è—Ç—å –≤–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å",
                                "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞",
                                "–ó–∞–ø—á–∞—Å—Ç—å –∑–∞–∫–∞–∑–∞–Ω–∞, –æ–∂–∏–¥–∞–µ–º –ø–æ—Å—Ç–∞–≤–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –¥–Ω–µ–π",
                                "–†–∞–±–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –∑–∞–±–∏—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å",
                                "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –†–∞–¥—ã –±—ã–ª–∏ –ø–æ–º–æ—á—å",
                                "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ —Å–ª–µ–¥—É—é—â–µ–µ –¢–û —á–µ—Ä–µ–∑ 15000 –∫–º",
                                "–£ –Ω–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–∫–∏–¥–∫–∞ 10% –Ω–∞ –º–∞—Å–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞"
                };

                List<ChatMessage> messages = new ArrayList<>();

                // –°–æ–∑–¥–∞–µ–º 150 —Å–æ–æ–±—â–µ–Ω–∏–π
                for (int i = 0; i < 150; i++) {
                        boolean isFromClient = random.nextBoolean();
                        User sender = isFromClient ? clients.get(random.nextInt(clients.size()))
                                        : masters.get(random.nextInt(masters.size()));
                        User recipient = isFromClient ? masters.get(random.nextInt(masters.size()))
                                        : clients.get(random.nextInt(clients.size()));

                        String content = messageTexts[random.nextInt(messageTexts.length)];

                        messages.add(createChatMessage(sender, recipient, content));
                }

                chatMessageRepository.saveAll(messages);
                log.info("‚úÖ –°–æ–∑–¥–∞–Ω–æ {} —Å–æ–æ–±—â–µ–Ω–∏–π", chatMessageRepository.count());
        }

        private ChatMessage createChatMessage(User sender, User recipient, String content) {
                return ChatMessage.builder()
                                .sender(sender)
                                .recipient(recipient)
                                .content(content)
                                .type(ChatMessageType.TEXT)
                                .isRead(random.nextDouble() > 0.3)
                                .createdAt(randomPastDate(60))
                                .build();
        }

        private void createNotifications() {
                log.info("üîî –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...");

                List<User> allUsers = userRepository.findAll();

                if (allUsers.isEmpty()) {
                        log.warn("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
                        return;
                }

                String[] notificationTexts = {
                                "–í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
                                "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ –∑–∞–≤—Ç—Ä–∞",
                                "–†–∞–±–æ—Ç—ã –ø–æ –≤–∞—à–µ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é –∑–∞–≤–µ—Ä—à–µ–Ω—ã",
                                "–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                                "–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤",
                                "–ê–∫—Ü–∏—è: —Å–∫–∏–¥–∫–∞ 15% –Ω–∞ –≤—Å–µ –º–∞—Å–ª–∞",
                                "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –ø–ª–∞–Ω–æ–≤–æ–µ –¢–û",
                                "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–∞—Å—Ç–µ—Ä–∞",
                                "–í–∞—à –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
                };

                NotificationType[] types = { NotificationType.INFO, NotificationType.SUCCESS,
                                NotificationType.WARNING };
                List<Notification> notifications = new ArrayList<>();

                // –°–æ–∑–¥–∞–µ–º 200 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                for (int i = 0; i < 200; i++) {
                        User user = allUsers.get(random.nextInt(allUsers.size()));
                        String message = notificationTexts[random.nextInt(notificationTexts.length)];
                        NotificationType type = types[random.nextInt(types.length)];

                        notifications.add(createNotification(user, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", message, type));
                }

                notificationRepository.saveAll(notifications);
                log.info("‚úÖ –°–æ–∑–¥–∞–Ω–æ {} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", notificationRepository.count());
        }

        private Notification createNotification(User user, String title, String message, NotificationType type) {
                return Notification.builder()
                                .recipient(user)
                                .title(title)
                                .message(message)
                                .type(type)
                                .isRead(random.nextDouble() > 0.4)
                                .createdAt(randomPastDate(30))
                                .build();
        }

        private LocalDateTime randomPastDate(int daysAgo) {
                return LocalDateTime.now().minusDays(random.nextInt(daysAgo));
        }

        private LocalDateTime randomFutureDate(int daysAhead) {
                return LocalDateTime.now().plusDays(random.nextInt(daysAhead));
        }

        private void printStatistics() {
                log.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:");
                log.info("   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {}", userRepository.count());
                log.info("   üè¢ –°–¢–û: {}", serviceStationRepository.count());
                log.info("   üîß –£—Å–ª—É–≥–∏: {}", serviceRepository.count());
                log.info("   üõí –ü—Ä–æ–¥—É–∫—Ç—ã: {}", productRepository.count());
                log.info("   üìÖ –ó–∞–ø–∏—Å–∏: {}", appointmentRepository.count());
                log.info("   üõçÔ∏è –ó–∞–∫–∞–∑—ã: {}", orderRepository.count());
                log.info("   ‚≠ê –û—Ç–∑—ã–≤—ã: {}", reviewRepository.count());
                log.info("   üí¨ –°–æ–æ–±—â–µ–Ω–∏—è: {}", chatMessageRepository.count());
                log.info("   üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {}", notificationRepository.count());
        }
}