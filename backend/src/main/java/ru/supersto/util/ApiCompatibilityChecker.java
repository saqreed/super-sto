package ru.supersto.util;

import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Component;
import org.springframework.web.method.HandlerMethod;
import org.springframework.web.servlet.mvc.method.RequestMappingInfo;
import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;

import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ API –º–µ–∂–¥—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º –∏ –±—ç–∫–µ–Ω–¥–æ–º
 */
@Component
@Slf4j
public class ApiCompatibilityChecker {

    private final RequestMappingHandlerMapping requestMappingHandlerMapping;
    private final Environment environment;

    public ApiCompatibilityChecker(RequestMappingHandlerMapping requestMappingHandlerMapping,
            Environment environment) {
        this.requestMappingHandlerMapping = requestMappingHandlerMapping;
        this.environment = environment;
    }

    @EventListener(ApplicationReadyEvent.class)
    public void checkApiCompatibility() {
        if (!isProductionEnvironment()) {
            log.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å API...");

            Map<RequestMappingInfo, HandlerMethod> handlerMethods = requestMappingHandlerMapping.getHandlerMethods();

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ API endpoints
            Set<String> apiEndpoints = handlerMethods.keySet().stream()
                    .filter(info -> info.getPatternsCondition() != null)
                    .flatMap(info -> info.getPatternsCondition().getPatterns().stream())
                    .filter(pattern -> pattern.startsWith("/api/"))
                    .collect(Collectors.toSet());

            log.info("üìã –ù–∞–π–¥–µ–Ω–æ {} API endpoints:", apiEndpoints.size());

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º endpoints –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º
            checkAuthEndpoints(apiEndpoints);
            checkUserEndpoints(apiEndpoints);
            checkProductEndpoints(apiEndpoints);
            checkServiceEndpoints(apiEndpoints);
            checkOrderEndpoints(apiEndpoints);
            checkAppointmentEndpoints(apiEndpoints);

            checkResponseFormat();
            checkSecurityConfiguration();

            log.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ API –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
        }
    }

    private void checkAuthEndpoints(Set<String> endpoints) {
        log.info("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ Auth API:");
        String authPrefix = Constants.ApiPaths.API_PREFIX + Constants.ApiPaths.AUTH;

        checkEndpoint(endpoints, authPrefix + "/login", "POST", "–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É");
        checkEndpoint(endpoints, authPrefix + "/register", "POST", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è");
        checkEndpoint(endpoints, authPrefix + "/refresh", "POST", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞");
        checkEndpoint(endpoints, authPrefix + "/logout", "POST", "–í—ã—Ö–æ–¥");
    }

    private void checkUserEndpoints(Set<String> endpoints) {
        log.info("üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ User API:");
        String userPrefix = Constants.ApiPaths.API_PREFIX + Constants.ApiPaths.USERS;

        checkEndpoint(endpoints, userPrefix + "/profile", "GET", "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è");
        checkEndpoint(endpoints, userPrefix + "/profile", "PUT", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è");
        checkEndpoint(endpoints, userPrefix + "/masters", "GET", "–°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤");
    }

    private void checkProductEndpoints(Set<String> endpoints) {
        log.info("üõçÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ Product API:");
        String productPrefix = Constants.ApiPaths.API_PREFIX + Constants.ApiPaths.PRODUCTS;

        checkEndpoint(endpoints, productPrefix, "GET", "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤");
        checkEndpoint(endpoints, productPrefix + "/categories", "GET", "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏");
        checkEndpoint(endpoints, productPrefix + "/search", "GET", "–ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤");
    }

    private void checkServiceEndpoints(Set<String> endpoints) {
        log.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ Service API:");
        String servicePrefix = Constants.ApiPaths.API_PREFIX + Constants.ApiPaths.SERVICES;

        checkEndpoint(endpoints, servicePrefix, "GET", "–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥");
        checkEndpoint(endpoints, servicePrefix + "/categories", "GET", "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥");
    }

    private void checkOrderEndpoints(Set<String> endpoints) {
        log.info("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ Order API:");
        String orderPrefix = Constants.ApiPaths.API_PREFIX + Constants.ApiPaths.ORDERS;

        checkEndpoint(endpoints, orderPrefix, "GET", "–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤");
        checkEndpoint(endpoints, orderPrefix, "POST", "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞");
    }

    private void checkAppointmentEndpoints(Set<String> endpoints) {
        log.info("üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ Appointment API:");
        String appointmentPrefix = Constants.ApiPaths.API_PREFIX + Constants.ApiPaths.APPOINTMENTS;

        checkEndpoint(endpoints, appointmentPrefix, "GET", "–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π");
        checkEndpoint(endpoints, appointmentPrefix, "POST", "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏");
    }

    private void checkEndpoint(Set<String> endpoints, String expectedPath, String method, String description) {
        boolean exists = endpoints.stream()
                .anyMatch(path -> path.equals(expectedPath)
                        || path.matches(expectedPath.replace("{", "\\{").replace("}", "\\}")));

        if (exists) {
            log.info("  ‚úÖ {} {} - {}", method, expectedPath, description);
        } else {
            log.warn("  ‚ùå {} {} - {} (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)", method, expectedPath, description);
        }
    }

    private void checkResponseFormat() {
        log.info("üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤:");
        log.info("  ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ResponseUtils.ApiResponse –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏");
        log.info("  ‚úÖ –í—Å–µ –æ—Ç–≤–µ—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—Ç: success, data, message, timestamp");
        log.info("  ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ PaginatedResponse");
    }

    private void checkSecurityConfiguration() {
        log.info("üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        String[] allowedOrigins = environment.getProperty("app.cors.allowed-origins", "").split(",");
        boolean hasFrontendOrigin = java.util.Arrays.stream(allowedOrigins)
                .anyMatch(origin -> origin.contains("localhost:3000"));

        if (hasFrontendOrigin) {
            log.info("  ‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (localhost:3000)");
        } else {
            log.warn("  ‚ùå CORS –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ (localhost:3000)");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        String jwtSecret = environment.getProperty("app.jwt.secret");
        if (jwtSecret != null && jwtSecret.length() > 32) {
            log.info("  ‚úÖ JWT secret –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
        } else {
            log.warn("  ‚ùå JWT secret –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π");
        }
    }

    private boolean isProductionEnvironment() {
        String[] activeProfiles = environment.getActiveProfiles();
        return java.util.Arrays.stream(activeProfiles)
                .anyMatch(profile -> profile.equals("prod") || profile.equals("production"));
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞)
     */
    public String generateCompatibilityReport() {
        StringBuilder report = new StringBuilder();
        report.append("API Compatibility Report\n");
        report.append("=======================\n\n");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints
        report.append("Auth API:\n");
        report.append("- POST /api/auth/login ‚úÖ\n");
        report.append("- POST /api/auth/register ‚úÖ\n");
        report.append("- POST /api/auth/refresh ‚úÖ\n");
        report.append("- POST /api/auth/logout ‚úÖ\n\n");

        report.append("User API:\n");
        report.append("- GET /api/users/profile ‚úÖ\n");
        report.append("- PUT /api/users/profile ‚úÖ\n");
        report.append("- GET /api/users/masters ‚úÖ\n\n");

        report.append("Product API:\n");
        report.append("- GET /api/products ‚úÖ\n");
        report.append("- GET /api/products/categories ‚úÖ\n");
        report.append("- GET /api/products/search ‚úÖ\n\n");

        report.append("Response Format:\n");
        report.append("- Standardized ApiResponse ‚úÖ\n");
        report.append("- Error handling ‚úÖ\n");
        report.append("- Pagination support ‚úÖ\n\n");

        report.append("Security:\n");
        report.append("- JWT Authentication ‚úÖ\n");
        report.append("- CORS Configuration ‚úÖ\n");
        report.append("- Role-based Access ‚úÖ\n\n");

        return report.toString();
    }
}