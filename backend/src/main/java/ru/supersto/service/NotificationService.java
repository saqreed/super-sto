package ru.supersto.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import ru.supersto.dto.NotificationDTO;
import ru.supersto.entity.*;
import ru.supersto.exception.ResourceNotFoundException;
import ru.supersto.repository.NotificationRepository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class NotificationService {

    private final NotificationRepository notificationRepository;
    private final UserService userService;

    public NotificationDTO createNotification(NotificationDTO notificationDTO) {
        User recipient = userService.findById(notificationDTO.getRecipientId());

        Notification notification = Notification.builder()
                .recipient(recipient)
                .title(notificationDTO.getTitle())
                .message(notificationDTO.getMessage())
                .type(notificationDTO.getType())
                .referenceId(notificationDTO.getReferenceId())
                .referenceType(notificationDTO.getReferenceType())
                .actionUrl(notificationDTO.getActionUrl())
                .build();

        notification.prePersist();
        Notification savedNotification = notificationRepository.save(notification);

        log.info("–°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", recipient.getEmail(), notificationDTO.getTitle());

        return mapToDTO(savedNotification);
    }

    public List<NotificationDTO> getMyNotifications() {
        User currentUser = userService.getCurrentUser();

        List<Notification> notifications = notificationRepository.findByRecipientIdOrderByCreatedAtDesc(
                currentUser.getId());

        return notifications.stream()
                .filter(n -> !n.isExpired())
                .map(this::mapToDTO)
                .collect(Collectors.toList());
    }

    public List<NotificationDTO> getUnreadNotifications() {
        User currentUser = userService.getCurrentUser();

        List<Notification> notifications = notificationRepository.findByRecipientIdAndIsReadFalseOrderByCreatedAtDesc(
                currentUser.getId());

        return notifications.stream()
                .filter(n -> !n.isExpired())
                .map(this::mapToDTO)
                .collect(Collectors.toList());
    }

    public long getUnreadCount() {
        User currentUser = userService.getCurrentUser();
        return notificationRepository.countUnreadNotifications(currentUser.getId());
    }

    public NotificationDTO markAsRead(String notificationId) {
        Notification notification = notificationRepository.findById(notificationId)
                .orElseThrow(() -> new ResourceNotFoundException("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å ID: " + notificationId));

        User currentUser = userService.getCurrentUser();

        // –¢–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
        if (!notification.getRecipient().getId().equals(currentUser.getId())) {
            throw new RuntimeException("–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—á–∞—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
        }

        notification.markAsRead();
        Notification updatedNotification = notificationRepository.save(notification);

        log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ", notificationId);

        return mapToDTO(updatedNotification);
    }

    public void markAllAsRead() {
        User currentUser = userService.getCurrentUser();

        List<Notification> unreadNotifications = notificationRepository
                .findByRecipientIdAndIsReadFalseOrderByCreatedAtDesc(
                        currentUser.getId());

        for (Notification notification : unreadNotifications) {
            notification.markAsRead();
            notificationRepository.save(notification);
        }

        log.info("–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ", currentUser.getEmail());
    }

    public void cleanupExpiredNotifications() {
        notificationRepository.deleteExpiredNotifications(LocalDateTime.now());
        log.info("–£–¥–∞–ª–µ–Ω—ã –∏—Å—Ç–µ–∫—à–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

    public void notifyAppointmentStatusChange(Appointment appointment) {
        String title = "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏";
        String message = String.format("–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ %s –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: %s",
                appointment.getService().getName(),
                getStatusText(appointment.getStatus()));

        NotificationDTO notification = NotificationDTO.builder()
                .recipientId(appointment.getClient().getId())
                .title(title)
                .message(message)
                .type(NotificationType.INFO)
                .referenceId(appointment.getId())
                .referenceType("APPOINTMENT")
                .actionUrl("/appointments/" + appointment.getId())
                .build();

        createNotification(notification);

        // –≠–º—É–ª—è—Ü–∏—è email (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
        simulateEmailNotification(appointment.getClient().getEmail(), title, message);
    }

    public void notifyOrderStatusChange(Order order) {
        String title = "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞";
        String message = String.format("–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #%s –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: %s",
                order.getId().substring(0, 8),
                getOrderStatusText(order.getStatus()));

        NotificationDTO notification = NotificationDTO.builder()
                .recipientId(order.getClient().getId())
                .title(title)
                .message(message)
                .type(NotificationType.INFO)
                .referenceId(order.getId())
                .referenceType("ORDER")
                .actionUrl("/orders/" + order.getId())
                .build();

        createNotification(notification);

        // –≠–º—É–ª—è—Ü–∏—è email
        simulateEmailNotification(order.getClient().getEmail(), title, message);
    }

    public void notifyNewReview(Review review) {
        if (review.getMaster() != null) {
            String title = "–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤";
            String message = String.format("–í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤ —Å –æ—Ü–µ–Ω–∫–æ–π %d –∑–≤–µ–∑–¥ –∑–∞ —É—Å–ª—É–≥—É '%s'",
                    review.getRating(),
                    review.getService().getName());

            NotificationDTO notification = NotificationDTO.builder()
                    .recipientId(review.getMaster().getId())
                    .title(title)
                    .message(message)
                    .type(NotificationType.SUCCESS)
                    .referenceId(review.getId())
                    .referenceType("REVIEW")
                    .actionUrl("/reviews/" + review.getId())
                    .build();

            createNotification(notification);
        }
    }

    public void notifyLowStock(Product product) {
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–∏–∑–∫–æ–º –æ—Å—Ç–∞—Ç–∫–µ
        List<User> admins = userService.findByRole(UserRole.ADMIN);

        for (User admin : admins) {
            String title = "–ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞";
            String message = String.format("–¢–æ–≤–∞—Ä '%s' (–∞—Ä—Ç. %s) –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è. –û—Å—Ç–∞—Ç–æ–∫: %d —à—Ç.",
                    product.getName(),
                    product.getPartNumber(),
                    product.getQuantity());

            NotificationDTO notification = NotificationDTO.builder()
                    .recipientId(admin.getId())
                    .title(title)
                    .message(message)
                    .type(NotificationType.WARNING)
                    .referenceId(product.getId())
                    .referenceType("PRODUCT")
                    .actionUrl("/products/" + product.getId())
                    .build();

            createNotification(notification);
        }
    }

    private void simulateEmailNotification(String email, String title, String message) {
        // –≠–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —á–µ—Ä–µ–∑ –ª–æ–≥–∏ (–¥–ª—è –ø–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞)
        log.info("üìß EMAIL SIMULATION üìß");
        log.info("To: {}", email);
        log.info("Subject: {}", title);
        log.info("Body: {}", message);
        log.info("========================");
    }

    private String getStatusText(AppointmentStatus status) {
        return switch (status) {
            case PENDING -> "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è";
            case CONFIRMED -> "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞";
            case IN_PROGRESS -> "–í –ø—Ä–æ—Ü–µ—Å—Å–µ";
            case COMPLETED -> "–ó–∞–≤–µ—Ä—à–µ–Ω–∞";
            case CANCELLED -> "–û—Ç–º–µ–Ω–µ–Ω–∞";
            default -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
        };
    }

    private String getOrderStatusText(OrderStatus status) {
        return switch (status) {
            case PENDING -> "–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏";
            case CONFIRMED -> "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω";
            case SHIPPED -> "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω";
            case DELIVERED -> "–î–æ—Å—Ç–∞–≤–ª–µ–Ω";
            case CANCELLED -> "–û—Ç–º–µ–Ω—ë–Ω";
            default -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
        };
    }

    private NotificationDTO mapToDTO(Notification notification) {
        return NotificationDTO.builder()
                .id(notification.getId())
                .recipientId(notification.getRecipient().getId())
                .recipientName(
                        notification.getRecipient().getFirstName() + " " + notification.getRecipient().getLastName())
                .title(notification.getTitle())
                .message(notification.getMessage())
                .type(notification.getType())
                .referenceId(notification.getReferenceId())
                .referenceType(notification.getReferenceType())
                .isRead(notification.getIsRead())
                .actionUrl(notification.getActionUrl())
                .createdAt(notification.getCreatedAt())
                .readAt(notification.getReadAt())
                .expiresAt(notification.getExpiresAt())
                .build();
    }
}