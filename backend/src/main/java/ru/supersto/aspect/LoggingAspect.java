package ru.supersto.aspect;

import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.*;
import org.springframework.stereotype.Component;
import org.springframework.util.StopWatch;

import java.util.Arrays;

/**
 * –ê—Å–ø–µ–∫—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤
 */
@Aspect
@Component
@Slf4j
public class LoggingAspect {

    /**
     * Pointcut –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –≤ –ø–∞–∫–µ—Ç–∞—Ö service –∏ controller
     */
    @Pointcut("execution(* ru.supersto.service..*(..)) || execution(* ru.supersto.controller..*(..))")
    public void applicationMethods() {
    }

    /**
     * Pointcut –¥–ª—è –≤—Å–µ—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
     */
    @Pointcut("execution(public * *(..))")
    public void publicMethods() {
    }

    // –£–±—Ä–∞–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞ - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –º—É—Å–æ—Ä–∞

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
     */
    @AfterThrowing(pointcut = "applicationMethods() && publicMethods()", throwing = "exception")
    public void logMethodException(JoinPoint joinPoint, Throwable exception) {
        String className = joinPoint.getTarget().getClass().getSimpleName();
        String methodName = joinPoint.getSignature().getName();

        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –æ—à–∏–±–∫–∏ refresh token
        if (exception.getMessage() != null && exception.getMessage().contains("–æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω")) {
            return;
        }

        log.warn("‚ùå {}.{}: {}", className, methodName, exception.getMessage());
    }

    /**
     * –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    @Around("execution(* ru.supersto.service..*(..))")
    public Object logExecutionTime(ProceedingJoinPoint joinPoint) throws Throwable {
        String className = joinPoint.getTarget().getClass().getSimpleName();
        String methodName = joinPoint.getSignature().getName();

        StopWatch stopWatch = new StopWatch();
        stopWatch.start();

        try {
            Object result = joinPoint.proceed();
            stopWatch.stop();

            long executionTime = stopWatch.getTotalTimeMillis();
            if (executionTime > 1000) {
                log.warn("üêå {}.{}: {} –º—Å", className, methodName, executionTime);
            }

            return result;
        } catch (Throwable throwable) {
            stopWatch.stop();
            // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º, —É–∂–µ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –≤ logMethodException
            throw throwable;
        }
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º
     */
    @Around("execution(* ru.supersto.controller..*(..))")
    public Object logHttpRequests(ProceedingJoinPoint joinPoint) throws Throwable {
        String className = joinPoint.getTarget().getClass().getSimpleName();
        String methodName = joinPoint.getSignature().getName();

        StopWatch stopWatch = new StopWatch();
        stopWatch.start();

        try {
            Object result = joinPoint.proceed();
            stopWatch.stop();

            long time = stopWatch.getTotalTimeMillis();
            if (time > 500) {
                log.info("üåê {}.{}: {} –º—Å", className, methodName, time);
            }

            return result;
        } catch (Throwable throwable) {
            stopWatch.stop();
            // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º, —É–∂–µ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –≤ logMethodException
            throw throwable;
        }
    }
}