import React, { useState } from 'react';

export default function TestConnection() {
  const [status, setStatus] = useState('idle'); // idle, loading, success, error
  const [message, setMessage] = useState('');

  const testConnection = async () => {
    setStatus('loading');
    setMessage('–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...');
    
    try {
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ health check
      const response = await fetch('http://localhost:8081/api', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      
      if (response.ok || response.status === 401) {
        // 401 –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ backend —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω—É–∂–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        setStatus('success');
        setMessage('‚úÖ Backend —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ http://localhost:8081/api');
      } else {
        setStatus('error');
        setMessage(`‚ùå –û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
      }
    } catch (error) {
      setStatus('error');
      setMessage(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ backend: ${error.message}`);
    }
  };

  const testAuth = async () => {
    setStatus('loading');
    setMessage('–¢–µ—Å—Ç–∏—Ä—É–µ–º API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    
    try {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π endpoint —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞)
      const response = await fetch('http://localhost:8081/api/auth/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: 'test@example.com',
          password: 'password123',
          firstName: 'Test',
          lastName: 'User'
        })
      });
      
      if (response.status === 400 || response.status === 409) {
        // 400/409 –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ API —Ä–∞–±–æ—Ç–∞–µ—Ç (–≤–∞–ª–∏–¥–∞—Ü–∏—è/–∫–æ–Ω—Ñ–ª–∏–∫—Ç)
        setStatus('success');
        setMessage('‚úÖ API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      } else if (response.ok) {
        setStatus('success');
        setMessage('‚úÖ API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç (—Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω)');
      } else {
        const text = await response.text();
        setStatus('error');
        setMessage(`‚ùå –û—à–∏–±–∫–∞ API: ${response.status} - ${text}`);
      }
    } catch (error) {
      setStatus('error');
      setMessage(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: ${error.message}`);
    }
  };

  const getStatusColor = () => {
    switch (status) {
      case 'loading':
        return 'text-yellow-600 bg-yellow-50 border-yellow-200';
      case 'success':
        return 'text-green-600 bg-green-50 border-green-200';
      case 'error':
        return 'text-red-600 bg-red-50 border-red-200';
      default:
        return 'text-gray-600 bg-gray-50 border-gray-200';
    }
  };

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
      <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
        üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Backend
      </h3>
      
      <div className="space-y-4">
        <div className="flex space-x-3">
          <button
            onClick={testConnection}
            disabled={status === 'loading'}
            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
          >
            {status === 'loading' ? '–ü—Ä–æ–≤–µ—Ä–∫–∞...' : '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ'}
          </button>
          
          <button
            onClick={testAuth}
            disabled={status === 'loading'}
            className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50"
          >
            {status === 'loading' ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–¢–µ—Å—Ç API'}
          </button>
        </div>

        {message && (
          <div className={`p-4 border rounded-md ${getStatusColor()}`}>
            <div className="flex items-center">
              {status === 'loading' && (
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-current mr-2"></div>
              )}
              <span className="text-sm font-medium">{message}</span>
            </div>
          </div>
        )}
        
        <div className="text-sm text-gray-500 dark:text-gray-400">
          <p><strong>Backend URL:</strong> http://localhost:8081/api</p>
          <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {status === 'idle' ? '–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω' : status}</p>
        </div>
      </div>
    </div>
  );
} 